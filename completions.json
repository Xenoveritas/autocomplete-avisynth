{
  "wiki": "http://avisynth.nl/index.php/",
  "control": [
    "return",
    "global",
    "try",
    "catch"
  ],
  "types": [
    {
      "text": "clip",
      "description": "video/audio clip",
      "wiki": "Script_variables"
    },
    {
      "text": "string",
      "description": "sequence of characters",
      "wiki": "Script_variables"
    },
    {
      "text": "int",
      "description": "32-bit integer",
      "wiki": "Script_variables"
    },
    {
      "text": "float",
      "description": "32-bit floating point value",
      "wiki": "Script_variables"
    },
    {
      "text": "bool",
      "description": "boolean value (true or false)",
      "wiki": "Script_variables"
    },
    {
      "text": "val",
      "description": "any AviSynth type",
      "wiki": "Script_variables"
    }
  ],
  "functions": [
    {
      "text": "Max",
      "description": "return the greatest value among all input arguments",
      "signature": "float, float...",
      "returns": "float",
      "wiki": "Internal_functions#Max"
    },
    {
      "text": "Min",
      "description": "return the least value among all input arguments",
      "signature": "float, float...",
      "returns": "float",
      "wiki": "Internal_functions#Min"
    },
    {
      "text": "MulDiv",
      "description": "multiplies the first two arguments and then divides by the third",
      "signature": "int m, int n, int d",
      "returns": "int",
      "wiki": "Internal_functions#MulDiv"
    },
    {
      "text": "Floor",
      "description": "returns the input argument with the floating part rounded down",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Floor"
    },
    {
      "text": "Ceil",
      "description": "returns the input argument with the floating part rounded up",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Ceil"
    },
    {
      "text": "Round",
      "description": "returns the input argument rounded to the nearest integer",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Round"
    },
    {
      "text": "Sin",
      "description": "calculates the sine of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Sin"
    },
    {
      "text": "Cos",
      "description": "calculates the cosine of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Cos"
    },
    {
      "text": "Tan",
      "description": "calculates the tangent of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Tan"
    },
    {
      "text": "Asin",
      "description": "calculates the arc sine of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Asin"
    },
    {
      "text": "Acos",
      "description": "calculates the arc cosine of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Acos"
    },
    {
      "text": "Atan",
      "description": "calculates the arc tangent of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Atan"
    },
    {
      "text": "Atan2",
      "description": "calculates the angle (in radians) between the positive X-axis and the given point",
      "signature": "float x, float y",
      "returns": "float",
      "wiki": "Internal_functions#Atan2"
    },
    {
      "text": "Sinh",
      "description": "calculates the hyperbolic sine of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Sinh"
    },
    {
      "text": "Cosh",
      "description": "calculates the hyperbolic cosine of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Cosh"
    },
    {
      "text": "Tanh",
      "description": "calculates the hyperbolic tangent of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Tanh"
    },
    {
      "text": "Fmod",
      "description": "calculates the floating point modulo",
      "signature": "float, float",
      "returns": "float",
      "wiki": "Internal_functions#Fmod"
    },
    {
      "text": "Pi",
      "description": "returns \u03C0",
      "signature": "",
      "returns": "float",
      "wiki": "Internal_functions#Pi"
    },
    {
      "text": "Tau",
      "description": "returns \u03C4 (which is 2\u03C0)",
      "signature": "",
      "returns": "float",
      "wiki": false
    },
    {
      "text": "Exp",
      "description": "returns the natural (base-e) exponent of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Exp"
    },
    {
      "text": "Log",
      "description": "returns the natural (base-e) logarithm of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Log"
    },
    {
      "text": "Log10",
      "description": "returns the common logarithm of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Log10"
    },
    {
      "text": "Pow",
      "description": "returns base raised to the given power",
      "signature": "float base, float power",
      "returns": "float",
      "wiki": "Internal_functions#Pow"
    },
    {
      "text": "Sqrt",
      "description": "returns the square root of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Sqrt"
    },
    {
      "text": "Abs",
      "description": "returns the absolute value of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Abs"
    },
    {
      "text": "Sign",
      "description": "returns the sign of its argument (1, 0, or -1)",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Sign"
    },
    {
      "text": "Int",
      "description": "returns the input argument rounded towards zero",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Int"
    },
    {
      "text": "Frac",
      "description": "returns the fractional component of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Frac"
    },
    {
      "text": "Float",
      "description": "returns the input argument as a floating point number",
      "signature": "int",
      "returns": "float",
      "wiki": "Internal_functions#Float"
    },
    {
      "text": "Rand",
      "description": "returns a randomly generated number",
      "signature": "[int max], [bool scale], [bool seed]",
      "returns": "int",
      "wiki": "Internal_functions#Rand"
    },
    {
      "text": "Spline",
      "description": "interpolates the Y value based on a given X for the given spline",
      "signature": "float X, float x1, float y1, float x2, float y2..., [bool cubic]",
      "returns": "float",
      "wiki": "Internal_functions#Spline"
    },
    {
      "text": "ContinuedNumerator",
      "description": "calculates the numerator of a continued fraction",
      "signature": "float, int limit",
      "returns": "int",
      "wiki": "Internal_functions#Continued_Numerator.2C_Denominator"
    },
    {
      "text": "ContinuedDenominator",
      "description": "calculates the denominator of a continued fraction",
      "signature": "float, int limit",
      "returns": "int",
      "wiki": "Internal_functions#Continued_Numerator.2C_Denominator"
    },
    {
      "text": "BitAnd",
      "description": "bitwise AND",
      "signature": "int, int",
      "returns": "int",
      "wiki": "Internal_functions#BitAnd"
    },
    {
      "text": "BitNot",
      "description": "bitwise NOT",
      "signature": "int",
      "returns": "int",
      "wiki": "Internal_functions#BitNot"
    },
    {
      "text": "BitOr",
      "description": "bitwise OR",
      "signature": "int, int",
      "returns": "int",
      "wiki": "Internal_functions#BitOr"
    },
    {
      "text": "BitXor",
      "description": "bitwise XOR",
      "signature": "int, int",
      "returns": "int",
      "wiki": "Internal_functions#BitXor"
    },
    {
      "text": [ "BitLShift", "BitShl", "BitSal" ],
      "description": "bit-shift left",
      "signature": "int number, int shift",
      "returns": "int",
      "wiki": "Internal_functions#Bit_shift_left"
    },
    {
      "text": [ "BitRShiftA", "BitRShiftS", "BitSar" ],
      "description": "arithmetic (signed) bit-shift right",
      "signature": "int number, int shift",
      "returns": "int",
      "wiki": "Internal_functions#Bit_shift_right"
    },
    {
      "text": [ "BitRShiftL", "BitRShiftU", "BitShr" ],
      "description": "logical (unsigned) bit-shift right",
      "signature": "int number, int shift",
      "returns": "int",
      "wiki": "Internal_functions#Bit_shift_right.2C_unsigned"
    },
    {
      "text": [ "BitLRotate", "BitRol" ],
      "description": "bit rotate left",
      "signature": "int number, int rotate",
      "returns": "int",
      "wiki": "Internal_functions#Bit_rotate_left"
    },
    {
      "text": [ "BitRRotate", "BitRor" ],
      "description": "bit rotate right",
      "signature": "int number, int rotate",
      "returns": "int",
      "wiki": "Internal_functions#Bit_rotate_right"
    },
    {
      "text": [ "BitTest", "BitTst" ],
      "description": "test if a bit is set",
      "signature": "int number, int bit",
      "returns": "bool",
      "wiki": "Internal_functions#Bit_test"
    },
    {
      "text": "BitSet",
      "description": "return the same number after setting the given bit to 1",
      "signature": "int number, int bit",
      "returns": "int",
      "wiki": "Internal_functions#BitSet"
    },
    {
      "text": [ "BitClear", "BitClr" ],
      "description": "return the same number after setting the given bit to 0",
      "signature": "int number, int bit",
      "returns": "int",
      "wiki": "Internal_functions#Bit_clear"
    },
    {
      "text": [ "BitChange", "BitChg" ],
      "description": "return the same number after inverting the given bit",
      "signature": "int number, int bit",
      "returns": "int",
      "wiki": "Internal_functions#Bit_change"
    },
    {
      "text": "LCase",
      "description": "convert string to lower case",
      "signature": "string",
      "returns": "string",
      "wiki": "Internal_functions#LCase"
    },
    {
      "text": "UCase",
      "description": "convert string to upper case",
      "signature": "string",
      "returns": "string",
      "wiki": "Internal_functions#UCase"
    },
    {
      "text": "StrLen",
      "description": "gets the length of a string",
      "signature": "string",
      "returns": "int",
      "wiki": "Internal_functions#StrLen"
    },
    {
      "text": "RevStr",
      "description": "reverse a string (\"AviSynth\" \u2192 \"htnySivA\")",
      "signature": "string",
      "returns": "string",
      "wiki": "Internal_functions#RevStr"
    },
    {
      "text": "LeftStr",
      "description": "returns the first count characters of the given string",
      "signature": "string, int count",
      "returns": "string",
      "wiki": "Internal_functions#LeftStr"
    },
    {
      "text": "RightStr",
      "description": "returns the last count characters of the given string",
      "signature": "string, int count",
      "returns": "string",
      "wiki": "Internal_functions#RightStr"
    },
    {
      "text": "MidStr",
      "description": "returns the given slice (1-based index)",
      "signature": "string, int count, [int length]",
      "returns": "string",
      "wiki": "Internal_functions#MidStr"
    },
    {
      "text": "FindStr",
      "description": "find the 1-based index of the needle string in the haystack",
      "signature": "string haystack, string needle",
      "returns": "int",
      "wiki": "Internal_functions#FindStr"
    },
    {
      "text": "FillStr",
      "description": "returns count copies of the fill string",
      "signature": "int count, [string fill]",
      "returns": "string",
      "wiki": "Internal_functions#FillStr"
    },
    {
      "text": "StrCmp",
      "description": "compare two strings (case-sensitive)",
      "signature": "string, string",
      "returns": "int",
      "wiki": "Internal_functions#StrCmp"
    },
    {
      "text": "StrCmpi",
      "description": "compare two strings (case-insensitive)",
      "signature": "string, string",
      "returns": "int",
      "wiki": "Internal_functions#StrCmpi"
    },
    {
      "text": "Chr",
      "description": "returns the given ASCII character code as a string",
      "signature": "int",
      "returns": "string",
      "wiki": "Internal_functions#Chr"
    },
    {
      "text": "Ord",
      "description": "returns the ASCII character code of the first character in the string",
      "signature": "string",
      "returns": "int",
      "wiki": "Internal_functions#Ord"
    },
    {
      "text": "Time",
      "description": "returns the current time in the given format",
      "signature": "string",
      "returns": "string",
      "wiki": "Internal_functions#Time"
    },
    {
      "text": "IsBool",
      "description": "tests if a variable is a boolean",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsBool"
    },
    {
      "text": "IsClip",
      "description": "tests if a variable is a clip",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsClip"
    },
    {
      "text": "IsFloat",
      "description": "tests if a variable is a float",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsFloat"
    },
    {
      "text": "IsInt",
      "description": "tests if a variable is an int",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsInt"
    },
    {
      "text": "IsString",
      "description": "tests if a variable is a string",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsString"
    },
    {
      "text": "Exist",
      "description": "check if a given file exists",
      "signature": "string filename",
      "returns": "bool",
      "wiki": "Internal_functions#Exist"
    },
    {
      "text": "Defined",
      "description": "check if a variable has a defined value",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#Defined"
    },
    {
      "text": "Value",
      "description": "convert a string to a numeric value",
      "signature": "string",
      "returns": "float",
      "wiki": "Internal_functions#Value"
    },
    {
      "text": "HexValue",
      "description": "convert a hexadecimal string to a numeric value",
      "signature": "string",
      "returns": "int",
      "wiki": "Internal_functions#HexValue"
    },
    {
      "text": "Hex",
      "description": "convert a number to a hexadecimal string",
      "signature": "int",
      "returns": "string",
      "wiki": "Internal_functions#Hex"
    },
    {
      "text": "String",
      "description": "convert a value to a string",
      "signature": "val, [string format]",
      "returns": "string",
      "wiki": "Internal_functions#String"
    },
    {
      "text": "Apply",
      "description": "invoke a function",
      "signature": "string function_name, [val args...]",
      "returns": "val",
      "wiki": "Internal_functions#Apply"
    },
    {
      "text": "Eval",
      "description": "evaluate a string as AviSynth script",
      "signature": "string, [string name]",
      "returns": "val",
      "wiki": "Internal_functions#Eval"
    },
    {
      "text": "Import",
      "description": "import another AviSynth script",
      "signature": "string",
      "returns": "val",
      "wiki": "Internal_functions#Import"
    },
    {
      "text": "Select",
      "description": "return the nth argument",
      "signature": "int n, [val args...]",
      "returns": "val",
      "wiki": "Internal_functions#Select"
    },
    {
      "text": "Default",
      "description": "returns the value of x if defined, otherwise the given default value",
      "signature": "val x, val value",
      "returns": "val",
      "wiki": "Internal_functions#Default"
    },
    {
      "text": "Assert",
      "description": "assert that a given condition is true, raising an error if it isn't",
      "signature": "bool condition, [string message]",
      "wiki": "Internal_functions#Assert"
    },
    {
      "text": "NOP",
      "description": "does nothing and returns 0",
      "signature": "",
      "returns": "int",
      "wiki": "Internal_functions#NOP"
    },
    {
      "text": "Undefined",
      "description": "returns the \"undefined\" value",
      "signature": "",
      "returns": "val",
      "wiki": "Internal_functions#Undefined"
    },
    {
      "text": "SetMemoryMax",
      "description": "sets the maximum memory to use in MB",
      "signature": "int mb",
      "returns": "int",
      "wiki": "Internal_functions#SetMemoryMax"
    },
    {
      "text": "SetWorkingDir",
      "description": "sets the working directory",
      "signature": "string dir",
      "returns": "int",
      "wiki": "Internal_functions#SetWorkingDir"
    },
    {
      "text": "SetPlanarLegacyAlignment",
      "description": "sets whether to use the legacy planar alignment mode",
      "signature": "bool",
      "wiki": "Internal_functions#SetPlanarLegacyAlignment"
    },
    {
      "text": "ScriptName",
      "description": "gets the full path name of the AVS script file",
      "signature": "",
      "returns": "string",
      "wiki": "Internal_functions#ScriptName"
    },
    {
      "text": "ScriptFile",
      "description": "gets the file name of the AVS script file",
      "signature": "",
      "returns": "string",
      "wiki": "Internal_functions#ScriptFile"
    },
    {
      "text": "ScriptDir",
      "description": "gets the path of the directory of the AVS script file",
      "signature": "",
      "returns": "string",
      "wiki": "Internal_functions#ScriptDir"
    },
    {
      "text": "VersionNumber",
      "description": "gets the version of AviSynth as a float",
      "signature": "",
      "returns": "float",
      "wiki": "Internal_functions#VersionNumber"
    },
    {
      "text": "VersionString",
      "description": "gets the version of AviSynth as a string",
      "signature": "",
      "returns": "string",
      "wiki": "Internal_functions#VersionString"
    },
    {
      "text": "AverageLuma",
      "description": "gets the average luma of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Average"
    },
    {
      "text": "AverageChromaU",
      "description": "gets the average of the U chroma plane of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Average"
    },
    {
      "text": "AverageChromaV",
      "description": "gets the average of the V chroma plane of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Average"
    },
    {
      "text": "RGBDifference",
      "description": "gets the RGB difference between two clips",
      "signature": "clip, clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference"
    },
    {
      "text": "LumaDifference",
      "description": "gets the luma difference between two clips",
      "signature": "clip, clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference"
    },
    {
      "text": "ChromaUDifference",
      "description": "gets the chroma U plane difference between two clips",
      "signature": "clip, clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference"
    },
    {
      "text": "ChromaVDifference",
      "description": "gets the chroma V plane difference between two clips",
      "signature": "clip, clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference"
    },
    {
      "text": "RGBDifferenceFromPrevious",
      "description": "gets the RGB difference between the current frame and the previous frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_from_previous"
    },
    {
      "text": "YDifferenceFromPrevious",
      "description": "gets the luma difference between the current frame and the previous frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_from_previous"
    },
    {
      "text": "UDifferenceFromPrevious",
      "description": "gets the U chroma plane difference between the current frame and the previous frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_from_previous"
    },
    {
      "text": "VDifferenceFromPrevious",
      "description": "gets the Y chroma plane difference between the current frame and the previous frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_from_previous"
    },
    {
      "text": "RGBDifferenceToNext",
      "description": "gets the RGB difference between the current frame and the next frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_to_next"
    },
    {
      "text": "YDifferenceToNext",
      "description": "gets the luma difference between the current frame and the next frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_to_next"
    },
    {
      "text": "UDifferenceToNext",
      "description": "gets the U chroma plane difference between the current frame and the next frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_to_next"
    },
    {
      "text": "VDifferenceToNext",
      "description": "gets the V chroma plane difference between the current frame and the next frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_to_next"
    },
    {
      "text": "YPlaneMax",
      "description": "gets the maximum luma value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "UPlaneMax",
      "description": "gets the maximum value of the U chroma plane of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "VPlaneMax",
      "description": "gets the maximum value of the V chroma plane of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "YPlaneMin",
      "description": "gets the minimum luma value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "UPlaneMin",
      "description": "gets the minimum value of the U chroma plane of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "VPlaneMin",
      "description": "gets the minimum value of the V chroma plane of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "YPlaneMedian",
      "description": "gets the median luma value of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "UPlaneMedian",
      "description": "gets the median value of the U chroma plane of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "VPlaneMedian",
      "description": "gets the median value of the V chroma plane of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "YPlaneMinMaxDifference",
      "description": "gets the difference between the minimum and miximum luma value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "UPlaneMinMaxDifference",
      "description": "gets the difference between the minimum and miximum U chroma plane value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "VPlaneMinMaxDifference",
      "description": "gets the difference between the minimum and miximum V chroma plane value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "Width",
      "description": "gets the width of a clip in pixels",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Resolution"
    },
    {
      "text": "Height",
      "description": "gets the height of a clip in pixels",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Resolution"
    },
    {
      "text": "FrameCount",
      "description": "gets the total number of frames",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Framerate_and_Duration"
    },
    {
      "text": "FrameRate",
      "description": "gets the approximate frame rate",
      "signature": "clip",
      "returns": "float",
      "wiki": "Clip_properties#Framerate_and_Duration"
    },
    {
      "text": "FrameRateNumerator",
      "description": "gets the exact numerator of the frame rate",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Framerate_and_Duration"
    },
    {
      "text": "FrameRateDenominator",
      "description": "gets the exact denominator of the frame rate",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Framerate_and_Duration"
    },
    {
      "text": "AudioRate",
      "description": "gets the audio sample rate",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLength",
      "description": "gets the number of audio samples (as a 32-bit value, may overflow)",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLengthF",
      "description": "gets the number of audio samples (as a floating point value, may have rounding)",
      "signature": "clip",
      "returns": "float",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLengthHi",
      "description": "gets the number of audio samples divided by d",
      "signature": "clip, int d",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLengthLo",
      "description": "gets the number of audio samples modulo m",
      "signature": "clip, int m",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLengthS",
      "description": "gets the number of audio samples as a string",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioChannels",
      "description": "gets the number of audio channels",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioBits",
      "description": "gets the audio bit depth",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "IsAudioFloat",
      "description": "gets whether audio samples are floating point",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "IsAudioInt",
      "description": "gets whether audio samples are integers",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "IsRGB",
      "description": "checks if a clip's colorspace is an RGB format",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsRGB24",
      "description": "checks if a clip's colorspace is RGB24",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsRGB32",
      "description": "checks if a clip's colorspace is RGB32",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYUV",
      "description": "checks if a clip's colorspace is YUV",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYUY2",
      "description": "checks if a clip's colorspace is YUY2",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYV12",
      "description": "checks if a clip's colorspace is YV12",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYV16",
      "description": "checks if a clip's colorspace is YV16",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYV24",
      "description": "checks if a clip's colorspace is YV24",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYV411",
      "description": "checks if a clip's colorspace is YV411",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "PixelType",
      "description": "gets the pixel format as a string",
      "signature": "clip",
      "returns": "string",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsFieldBased",
      "description": "gets whether the clip is field-based",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "IsFrameBased",
      "description": "gets whether the clip is frame-based",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "IsPlanar",
      "description": "gets whether the clip color format is planar",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "IsInterleaved",
      "description": "gets whether the clip color format is interleaved",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "GetParity",
      "description": "checks if on the given frame the frame is the top field (field-based) or the top field is first (frame-based)",
      "signature": "clip, [int frame]",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "HasAudio",
      "description": "gets whether the clip has audio",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "HasVideo",
      "description": "gets whether the clip has video",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "LoadPlugin",
      "description": "loads one or more external AviSynth plugins",
      "wiki": "Plugins#LoadPlugin",
      "signature": "string..."
    },
    {
      "text": "LoadVirtualDubPlugin",
      "description": "loads a VirtualDub plugin",
      "wiki": "Plugins#LoadVirtualDubPlugin",
      "signature": "string"
    },
    {
      "text": "LoadVFAPIPlugin",
      "description": "loads a VFAPI plugin",
      "wiki": "Plugins#LoadVFAPIPlugin",
      "signature": "string"
    },
    {
      "text": [ "LoadCPlugin", "Load_Stdcall_Plugin" ],
      "description": "loads an AviSynth C plugin",
      "wiki": "Plugins#LoadCPlugin",
      "signature": "string"
    },
    {
      "text": [ "AviSource", "OpenDMLSource", "AVIFileSource" ],
      "description": "load a clip from an AVI file",
      "wiki": "AviSource",
      "returns": "clip",
      "signature": "string filename..., [bool audio=true], [string pixel_type='FULL'], [string fourCC], [int vtrack=0], [int atrack=0]"
    },
    {
      "text": "DirectShowSource",
      "description": "load a clip from a video using DirectShow",
      "returns": "clip"
    },
    {
      "text": [ "ImageSource", "ImageReader" ],
      "returns": "clip",
      "description": "loads images as a clip",
      "signature": "[string file], [int start], [int end], [float fps], [bool use_DevIL], [bool info], [string pixel_type]",
      "wiki": "ImageSource"
    },
    {
      "text": "ImageSourceAnim",
      "description": "loads an animated image source as a clip (e.g. GIF)",
      "signature": "[string file], [float fps], [bool info], [string pixel_type='RGB32']",
      "returns": "clip",
      "wiki": "ImageSource"
    },
    {
      "text": "ImageWriter",
      "description": "export frames as individual images",
      "signature": "clip, [string file], [int start], [int end], [string type], [bool info]"
    },
    {
      "text": "SegmentedAVISource",
      "description": "load multiple AVI files and unaligned splice them together",
      "signature": "string base_filename..., [bool audio], [string pixel_type], [int vtrack=0], [int atrack=0]",
      "returns": "clip",
      "wiki": "SegmentedAviSource"
    },
    {
      "text": "SegmentedDirectShowSource",
      "description": "load multiple video files through DirectShow and unaligned splice them together",
      "signature": "string base_filename..., [float fps], [bool seek], [bool audio], [bool video], [bool convertfps], [bool seekzero], [int timeout], [string pixel_type]",
      "returns": "clip",
      "wiki": "SegmentedAviSource"
    },
    {
      "text": "SoundOut",
      "description": "displays a GUI to export audio",
      "signature": ""
    },
    {
      "text": "WAVSource",
      "description": "loads an audio-only clip",
      "signature": "string",
      "returns": "clip",
      "wiki": "AviSource"
    },
    {
      "text": "ColorYUV",
      "description": "adjust colors and luminance in a clip",
      "signature": "clip, [float gain_y], [float off_y], [float gamma_y], [float cont_y], [float gain_u], [float off_u], [float gamma_u], [float cont_u], [float gain_v], [float off_v], [float gamma_v], [float cont_v], [string levels], [string opt], [boolean showyuv], [boolean analyze], [boolean autowhite], [boolean autogain], [boolean conditional]",
      "returns": "clip"
    },
    {
      "text": "ConvertToRGB",
      "description": "convert a clip to interleaved RGB",
      "returns": "clip",
      "signature": "clip, [string matrix], [bool interlaced], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#RGB_interleaved"
    },
    {
      "text": "ConvertToRGB24",
      "description": "convert a clip to interleaved RGB24",
      "returns": "clip",
      "signature": "clip, [string matrix], [bool interlaced], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#RGB_interleaved"
    },
    {
      "text": "ConvertToRGB32",
      "description": "convert a clip to interleaved ARGB32",
      "returns": "clip",
      "signature": "clip, [string matrix], [bool interlaced], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#RGB_interleaved"
    },
    {
      "text": "ConvertToYUY2",
      "description": "convert a clip to interleaved YUY2",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#YUV422"
    },
    {
      "text": "ConvertBackToYUY2",
      "description": "convert a clip that was converted from YUY2 back to YUY2",
      "signature": "clip, [string matrix]",
      "returns": "clip",
      "wiki": "Convert#YUV422"
    },
    {
      "text": "ConvertToY8",
      "description": "convert a clip to Y8 (black and white)",
      "signature": "clip, [string matrix]",
      "returns": "clip",
      "wiki": "Convert#Y-only"
    },
    {
      "text": "ConvertToYV411",
      "description": "convert a clip to planar YUV411",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#YUV411"
    },
    {
      "text": "ConvertToYV12",
      "description": "convert a clip to planar YUV420",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample], [string ChromaOutPlacement]",
      "wiki": "Convert#YUV420"
    },
    {
      "text": "ConvertToYV16",
      "description": "convert a clip to planar YUV422",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#YUV422"
    },
    {
      "text": "ConvertToYV24",
      "description": "convert a clip to planar YUV444",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#YUV444"
    },
    {
      "text": "FixLuminance",
      "description": "correct a specific VCR quirk",
      "returns": "clip",
      "signature": "clip, int intercept, int slope",
      "deprecated": true
    },
    {
      "text": [ "Greyscale", "Grayscale" ],
      "description": "convert to greyscale without changing the color format",
      "returns": "clip",
      "signature": "clip, [string matrix]"
    },
    {
      "text": "Invert",
      "description": "invert color channels",
      "returns": "clip",
      "signature": "clip, [string channels]"
    },
    {
      "text": "Levels",
      "description": "adjust brightness, contrast, and gamma levels like VirtualDub does",
      "returns": "clip",
      "signature": "clip, int input_low, float gamma, int input_high, int output_low, int output_high, [bool coring], [bool dither]"
    },
    {
      "text": "Limiter",
      "description": "filter for clipping levels to within CCIR-601 range",
      "returns": "clip",
      "signature": "clip, [int min_luma], [int max_luma], [int min_chroma], [int max_chroma], [string show]"
    },
    {
      "text": "MergeARGB",
      "description": "merge the channels of each of the given clips into a new RGB32 clip",
      "returns": "clip",
      "signature": "clip alpha, clip red, clip green, clip blue",
      "wiki": "MergeRGB"
    },
    {
      "text": "MergeRGB",
      "description": "merge the channels of each of the given clips into a new RGB32 clip",
      "returns": "clip",
      "signature": "clip red, clip green, clip blue, [string pixel_type]"
    },
    {
      "text": "Merge",
      "description": "merge two clips with each other",
      "returns": "clip",
      "signature": "clip base, clip overlay, [float weight]"
    },
    {
      "text": "MergeChroma",
      "description": "merge only the chroma of two clips with each other",
      "returns": "clip",
      "signature": "clip base, clip overlay, [float weight]",
      "wiki": "Merge#MergeChroma"
    },
    {
      "text": "MergeLuma",
      "description": "merge only the luma of two clips with each other",
      "returns": "clip",
      "signature": "clip base, clip overlay, [float weight]",
      "wiki": "Merge#MergeLuma"
    },
    {
      "text": "RGBAdjust",
      "description": "adjust each color channel of an RGB clip individually",
      "returns": "clip",
      "signature": "clip, [float r], [float g], [float b], [float a], [float rb], [float gb], [float bb], [float ab], [float rg], [float gg], [float bg], [float ag], [bool analyze], [bool dither]"
    },
    {
      "text": "ShowAlpha",
      "description": "returns a grayscale copy of the alpha channel",
      "returns": "clip",
      "signature": "clip, [string pixel_type]"
    },
    {
      "text": "ShowRed",
      "description": "returns a grayscale copy of the red channel",
      "returns": "clip",
      "signature": "clip, [string pixel_type]",
      "wiki": "ShowAlpha"
    },
    {
      "text": "ShowGreen",
      "description": "returns a grayscale copy of the green channel",
      "returns": "clip",
      "signature": "clip, [string pixel_type]",
      "wiki": "ShowAlpha"
    },
    {
      "text": "ShowBlue",
      "description": "returns a grayscale copy of the blue channel",
      "returns": "clip",
      "signature": "clip, [string pixel_type]",
      "wiki": "ShowAlpha"
    },
    {
      "text": "SwapUV",
      "description": "swaps the U and V planes",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    },
    {
      "text": "UToY",
      "description": "copies the U plane to the Y plane",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    },
    {
      "text": "UToY8",
      "description": "copies the U plane to a new Y8 clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    }, {
      "text": "VToY",
      "description": "copies the V plane to the Y plane",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    },
    {
      "text": "VToY8",
      "description": "copies the V plane to a new Y8 clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    },
    {
      "text": "YToUV",
      "description": "copies the Y planes of two clips to the UV planes",
      "returns": "clip",
      "signature": "clip u, clip v, [clip y]",
      "wiki": "Swap"
    },
    {
      "text": "Subtract",
      "description": "subtracts one clip from another",
      "returns": "clip",
      "signature": "clip, clip"
    },
    {
      "text": "Tweak",
      "description": "tweak hue, saturation, brightness, and contrast of a YUV clip",
      "returns": "clip",
      "signature": "clip, [float hue], [float sat], [float bright], [float cont], [bool coring], [bool sse], [float startHue], [float endHue], [float maxSat], [float minSat], [float interp], [bool dither]"
    },
    {
      "text": "ColorKeyMask",
      "description": "clears pixels alpha channel based on a given color",
      "returns": "clip",
      "signature": "clip, int color, [int tolB], [int tolG], [int tolR]",
      "wiki": "Layer#ColorKeyMask"
    },
    {
      "text": "Layer",
      "description": "layers one clip over another",
      "returns": "clip",
      "signature": "clip base, clip overlay, [string op], [int level], [int x], [int y], [int threshold], [bool use_chroma]"
    },
    {
      "text": "Mask",
      "description": "applies a greyscale version of the mask clip as the alpha channel of the first clip",
      "returns": "clip",
      "signature": "clip, clip mask",
      "wiki": "Layer#Mask"
    },
    {
      "text": "MaskHS",
      "description": "generates a Y8 mask",
      "returns": "clip",
      "signature": "clip, [float startHue], [float endHue], [float maxSat], [float minSat], [bool coring]"
    },
    {
      "text": "Overlay",
      "description": "overlays a clip on top of another clip",
      "returns": "clip",
      "signature": "clip base, clip overlay, [int x], [int y], [clip mask], [float opacity], [string mode], [bool greymask], [string output], [bool ignore_conditional], [bool pc_range]"
    },
    {
      "text": "ResetMask",
      "description": "resets every pixel's alpha channel to full opacity",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Layer#ResetMask"
    },
    {
      "text": "AddBorders",
      "description": "add borders around a clip",
      "returns": "clip",
      "signature": "clip, int left, int top, int right, int bottom, [int color]"
    },
    {
      "text": "Crop",
      "description": "crop a clip to a certain area",
      "returns": "clip",
      "signature": "clip, int left, int top, int width, int height, [bool align]"
    },
    {
      "text": "CropBottom",
      "description": "crop the bottom count lines off a clip",
      "returns": "clip",
      "signature": "clip, int count",
      "wiki": "Crop"
    },
    {
      "text": "FlipHorizontal",
      "description": "flips a clip horizontally",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Flip"
    },
    {
      "text": "FlipVertical",
      "description": "flips a clip vertically",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Flip"
    },
    {
      "text": "Letterbox",
      "description": "black out the top/bottom of a clip",
      "returns": "clip",
      "signature": "clip, int top, int bottom, [int left], [int right], [int color]"
    },
    {
      "text": "ReduceBy2",
      "description": "halve the size of the input clip",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "HorizontalReduceBy2",
      "description": "halve the horizontal size of the input clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ReduceBy2"
    },
    {
      "text": "VerticalReduceBy2",
      "description": "halve the vertical size of the input clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ReduceBy2"
    },
    {
      "text": "BilinearResize",
      "description": "resize a clip using a bilinear resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#BilinearResize"
    },
    {
      "text": "BicubicResize",
      "description": "resize a clip using a bicubic resize",
      "signature": "clip, int target_width, int target_height, [float b=1.0/3.0], [float c=1.0/3.0], [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#BicubicResize"
    },
    {
      "text": "BlackmanResize",
      "description": "resize a clip using a Blackman resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height], [int taps=4]",
      "returns": "clip",
      "wiki": "Resize#BlackmanResize"
    },
    {
      "text": "GaussResize",
      "description": "resize a clip using a Gauss resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height], [float p=30.0]",
      "returns": "clip",
      "wiki": "Resize#GaussResize"
    },
    {
      "text": "LanczosResize",
      "description": "resize a clip using a Lanczos resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height], [int taps=3]",
      "returns": "clip",
      "wiki": "Resize#LanczosResize"
    },
    {
      "text": "Lanczos4Resize",
      "description": "resize a clip using a Lanczos resize with 4 taps",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#LanczosResize"
    },
    {
      "text": "PointResize",
      "description": "resize a clip using a nearest-neighbor resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#PointResize"
    },
    {
      "text": "SincResize",
      "description": "resize a clip using the truncated sinc function",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height], [int taps=4]",
      "returns": "clip",
      "wiki": "Resize#SincResize"
    },
    {
      "text": "Spline16Resize",
      "description": "resize a clip using a spline algorithm with \u221A16 (4) sample points",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#Spline_based_resizers"
    },
    {
      "text": "Spline36Resize",
      "description": "resize a clip using a spline algorithm with \u221A36 (6) sample points",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#Spline_based_resizers"
    },
    {
      "text": "Spline64Resize",
      "description": "resize a clip using a spline algorithm with \u221A64 (8) sample points",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#Spline_based_resizers"
    },
    {
      "text": "SkewRows",
      "description": "skew rows by a given number of pixels",
      "returns": "clip",
      "signature": "clip, int skew"
    },
    {
      "text": "TurnLeft",
      "description": "rotate a clip 90\u00B0 counterclockwise",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "TurnRight",
      "description": "rotate a clip 90\u00B0 clockwise",
      "returns": "clip",
      "signature": "clip",
      "wiki": "TurnLeft"
    },
    {
      "text": "Turn180",
      "description": "rotate a clip 180\u00B0 (versus merely flipping it)",
      "returns": "clip",
      "signature": "clip",
      "wiki": "TurnLeft"
    },
    {
      "text": "Blur",
      "description": "blur a clip",
      "returns": "clip",
      "signature": [
        "clip, float amount",
        "clip, float horizontal, float vertical, bool mmx"
      ]
    },
    {
      "text": "Sharpen",
      "description": "sharpen a clip",
      "returns": "clip",
      "signature": [
        "clip, float amount",
        "clip, float horizontal, float vertical, bool mmx"
      ],
      "wiki": "Blur"
    },
    {
      "text": "GeneralConvolution",
      "description": "performs a matrix convolution over an RGB32 clip",
      "returns": "clip",
      "signature": "clip, [int bias], [string matrix], [float divisor], [bool auto]"
    },
    {
      "text": "SpatialSoften",
      "description": "reduce noise by selectively blending pixels",
      "returns": "clip",
      "signature": "clip, int radius, int luma_threshold, int chroma_threshold",
      "wiki": "Soften"
    },
    {
      "text": "TemporalSoften",
      "description": "reduce noise by selectively blending pixels",
      "returns": "clip",
      "signature": "clip, int radius, int luma_threshold, int chroma_threshold",
      "wiki": "Soften"
    },
    {
      "text": "FixBrokenChromaUpsampling",
      "description": "fix broken chroma upsampling",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "AlignedSplice",
      "description": "splice together input clips, keeping sound tracks synced with their clips",
      "returns": "clip",
      "signature": "clip, clip...",
      "wiki": "Splice"
    },
    {
      "text": "UnalignedSplice",
      "description": "splice together input clips, concatenating video and sound tracks separately",
      "returns": "clip",
      "signature": "clip, clip...",
      "wiki": "Splice"
    },
    {
      "text": "AssumeFPS",
      "description": "change the framerate without changing the number of frames, changing the playback speed",
      "returns": "clip",
      "signature": [
        "clip, float fps, [bool sync_audio]",
        "clip, int numerator, [int denominator], [bool sync_audio]",
        "clip, clip, [bool sync_audio]",
        "clip, string preset, [bool sync_audio]"
      ],
      "wiki": "FPS#AssumeFPS"
    },
    {
      "text": "AssumeScaledFPS",
      "description": "change the framerate without changing the number of frames, changing the playback speed",
      "returns": "clip",
      "signature": "clip, [int multiplier], [int divisor], [bool sync_audio]",
      "wiki": "FPS#AssumeScaledFPS"
    },
    {
      "text": "ChangeFPS",
      "description": "change the framerate by duplicating or removing frames",
      "returns": "clip",
      "signature": [
        "clip, float fps, [bool linear]",
        "clip, int numerator, [int denominator], [bool linear]",
        "clip, clip, [bool linear]",
        "clip, string preset, [bool linear]"
      ],
      "wiki": "FPS#ChangeFPS"
    },
    {
      "text": "ConvertFPS",
      "description": "attempts to convert the framerate to another as smoothly as possible",
      "returns": "clip",
      "signature": [
        "clip, float new_rate, [int zone], [int vbi]",
        "clip, int numerator, [int denominator], [int zone], [int vbi]",
        "clip, clip, [int zone], [int vbi]",
        "clip, string preset, [int zone], [int vbi]"
      ],
      "wiki": "FPS#ConvertFPS"
    },
    {
      "text": "DeleteFrame",
      "description": "deletes the given frames",
      "returns": "clip",
      "signature": "clip, int frame..."
    },
    {
      "text": "Dissolve",
      "description": "dissolve two clips together, cross-fading between them",
      "returns": "clip",
      "signature": "clip, clip..., int overlap, [float fps]"
    },
    {
      "text": "DuplicateFrame",
      "description": "duplicates the given frames",
      "returns": "clip",
      "signature": "clip, int frame..."
    },
    {
      "text": "FadeIn",
      "description": "fade in over a given number of frames",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FadeOut",
      "description": "fade out over a given number of frames",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FadeIO",
      "description": "fade in and out over a given number of frames",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FadeIn0",
      "description": "fade in over a given number of frames without adding a blank frame",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FadeOut0",
      "description": "fade out over a given number of frames without adding a blank frame",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FadeIO0",
      "description": "fade in and out over a given number of frames without adding a blank frame",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FadeIn2",
      "description": "fade in over a given number of frames, adding two blank frames to the beginning",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FadeOut2",
      "description": "fade out over a given number of frames, adding two blank frames the end",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FadeIO2",
      "description": "fade in and out over a given number of frames, adding two blank frames on either end",
      "returns": "clip",
      "signature": "clip, int frames, [int color], [float fps]",
      "wiki": "Fade"
    },
    {
      "text": "FreezeFrame",
      "description": "replace frames between a given section with a specific frame",
      "returns": "clip",
      "signature": "clip, int first_frame, int last_frame, int source_frame"
    },
    {
      "text": "Interleave",
      "description": "interleave multiple clips into one video",
      "returns": "clip",
      "signature": "clip, clip..."
    },
    {
      "text": "Loop",
      "description": "loop the given sequence of frames",
      "returns": "clip",
      "signature": "clip, [int times], [int start], [int end]"
    },
    {
      "text": "Reverse",
      "description": "reverse a clip, playing it backwards, useful for finding hidden satanic messages",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "SelectEven",
      "description": "returns only the even frames (0-indexed), halving the frame count and frame rate",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Select"
    },
    {
      "text": "SelectOdd",
      "description": "returns only the odd frames (0-indexed), halving the frame count and frame rate",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Select"
    },
    {
      "text": "SelectEvery",
      "description": "returns specific frames every step_size frames",
      "returns": "clip",
      "signature": "clip, int step_size, int offset...",
      "wiki": "Select"
    },
    {
      "text": "SelectRangeEvery",
      "description": "returns a given number of frames every set number of frames",
      "returns": "clip",
      "signature": "clip, [int every], [int length], [int offset], [bool audio]",
      "wiki": "Select"
    },
    {
      "text": "Trim",
      "description": "trim a clip to a specific section",
      "returns": "clip",
      "signature": [
        "clip, int start, int end, [bool pad]",
        "clip, int start, int -duration, [bool pad]",
        "clip, int start, end=int, [bool pad]",
        "clip, int start, length=int, [bool pad]"
      ]
    },
    {
      "text": "AudioTrim",
      "description": "trim a clip, including audio-only clips, to a specific section",
      "returns": "clip",
      "signature": [
        "clip, float start, float end, [bool pad]",
        "clip, float start, float -duration, [bool pad]",
        "clip, float start, end=float, [bool pad]",
        "clip, float start, length=float, [bool pad]"
      ],
      "wiki": "Trim#AudioTrim"
    },
    {
      "text": "AssumeFrameBased",
      "description": "mark the clip as being frame-based",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Parity"
    },
    {
      "text": "AssumeFieldBased",
      "description": "mark the clip as being field-based",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Parity"
    },
    {
      "text": "AssumeTFF",
      "description": "mark a clip as having the top field first",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Parity"
    },
    {
      "text": "AssumeBFF",
      "description": "mark a clip as having the bottom field first",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Parity"
    },
    {
      "text": "ComplementParity",
      "description": "inverts the assumed field order",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Parity"
    },
    {
      "text": "Bob",
      "description": "bob-deinterlace a clip",
      "returns": "clip",
      "signature": "clip, [float b], [float c], [float height]"
    },
    {
      "text": "DoubleWeave",
      "description": "convert a field-based clip into a frame-based clip of the same framerate",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "PeculiarBlend",
      "description": "blends frames in a peculiar way to fix a very specific 3:2 pulldown artifact",
      "returns": "clip",
      "signature": "clip, int cutoff"
    },
    {
      "text": "Pulldown",
      "description": "performs a a:b pulldown",
      "returns": "clip",
      "signature": "clip, int a, int b"
    },
    {
      "text": "SeparateFields",
      "description": "splits a frame-based clip into a field-based clip",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "SeparateRows",
      "description": "splits rows from a single frame into interval frames",
      "returns": "clip",
      "signature": "clip, int interval",
      "wiki": "SeparateFields"
    },
    {
      "text": "SeparateColumns",
      "description": "splits columns from a single frame into interval frames",
      "returns": "clip",
      "signature": "clip, int interval",
      "wiki": "SeparateFields"
    },
    {
      "text": "SwapFields",
      "description": "swaps line 0 with 1, 2 and 3, and so on",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "Weave",
      "description": "convert a field-based clip into a frame-based clip that halves the framerate",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "WeaveColumns",
      "description": "create a new frame by combining the columns of period frames into one",
      "returns": "clip",
      "signature": "clip, int period",
      "wiki": "Weave"
    },
    {
      "text": "WeaveRows",
      "description": "create a new frame by combining rows from period frames into one",
      "returns": "clip",
      "signature": "clip, int period",
      "wiki": "Weave"
    },
    {
      "text": "Amplify",
      "description": "amplify audio in a clip",
      "returns": "clip",
      "signature": "clip, float..."
    },
    {
      "text": "AmplifydB",
      "description": "amplify audio in a clip by a given number of dBs",
      "returns": "clip",
      "signature": "clip, float...",
      "wiki": "Amplify"
    },
    {
      "text": "AssumeSampleRate",
      "description": "change the sample playback rate without converting data, changing playback time",
      "returns": "clip",
      "signature": "clip, int samplerate"
    },
    {
      "text": "AudioDub",
      "description": "dubs a video clip with audio from an audio clip (reversing the arguments if the first clip is audio-only and the second has video)",
      "returns": "clip",
      "signature": "clip video, clip audio"
    },
    {
      "text": "AudioDubEx",
      "description": "dubs a video clip with audio from an audio clip",
      "returns": "clip",
      "signature": "clip video, clip audio",
      "wiki": "AudioDub"
    },
    {
      "text": "ConvertToMono",
      "description": "merges all audio channels to a single mono channel",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "ConvertAudioTo8bit",
      "description": "convert audio samples to 8-bit integers",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ConvertAudio"
    },
    {
      "text": "ConvertAudioTo16bit",
      "description": "convert audio samples to 16-bit integers",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ConvertAudio"
    },
    {
      "text": "ConvertAudioTo24bit",
      "description": "convert audio samples to 24-bit integers",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ConvertAudio"
    },
    {
      "text": "ConvertAudioTo32bit",
      "description": "convert audio samples to 32-bit integers",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ConvertAudio"
    },
    {
      "text": "ConvertAudioToFloat",
      "description": "convert audio samples to 32-bit floating point",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ConvertAudio"
    },
    {
      "text": "DelayAudio",
      "description": "delays audio by a given number of seconds (negative trims audio)",
      "returns": "clip",
      "signature": "clip, float seconds"
    },
    {
      "text": "EnsureVBRMP3Sync",
      "description": "ensures synchronization with video when seeking or trimming",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": [ "GetChannel", "GetChannels" ],
      "description": "reduces the number of audio channels to the specific channels (1-indexed)",
      "returns": "clip",
      "signature": "clip, int...",
      "wiki": "GetChannel"
    },
    {
      "text": "GetLeftChannel",
      "description": "gets the left audio channel from a stereo clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "GetChannel"
    },
    {
      "text": "GetRightChannel",
      "description": "gets the right audio channel from a stereo clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "GetChannel"
    },
    {
      "text": "KillAudio",
      "description": "removes the audio from a clip",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "KillVideo",
      "description": "removes the video from a clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "KillAudio"
    },
    {
      "text": "MergeChannels",
      "description": "adds (not mixes) the audio channels from the clips into the first clip",
      "returns": "clip",
      "signature": "clip, clip..."
    },
    {
      "text": "MixAudio",
      "description": "mixes the audio in two clips with the same number of channels",
      "returns": "clip",
      "signature": "clip a, clip b, [float factor_a], [float factor_b]"
    },
    {
      "text": "Normalize",
      "description": "amplifies all audio to the given level",
      "returns": "clip",
      "signature": "clip, [float volume], [bool show]"
    },
    {
      "text": "ResampleAudio",
      "description": "resamples audio to the given rate",
      "returns": "clip",
      "signature": "clip, int new_rate_numerator, [int new_rate_denominator]"
    },
    {
      "text": "SSRC",
      "description": "high-quality audio resampling",
      "returns": "clip",
      "signature": "clip, int samplerate, [bool fast]"
    },
    {
      "text": "SuperEQ",
      "description": "applies a foobar2000 equalizer settings file",
      "returns": "clip",
      "signature": [
        "clip, string filename",
        "clip, float band..."
      ]
    },
    {
      "text": "TimeStretch",
      "description": "change pitch/tempo/sample rate without effecting the others",
      "returns": "clip",
      "signature": "clip, [float tempo], [float rate], [float pitch], [int sequence], [int seekwindow], [int overlap], [bool quickseek], [int aa]"
    },
    {
      "text": "Animate",
      "description": "animate filters by changing parameters over time",
      "returns": "clip",
      "signature": "clip, int start_frame, int end_frame, string filtername, val start_args..., val end_args..."
    },
    {
      "text": "ApplyRange",
      "description": "apply a filter to only a certain set of frames",
      "returns": "clip",
      "signature": "clip, int start_frame, int end_frame, string filtername, val args..."
    },
    {
      "text": "TCPServer",
      "description": "start AviSynth server on the given port",
      "returns": "clip",
      "signature": "clip, [int port]"
    },
    {
      "text": "TCPSource",
      "description": "connect to an AviSynth server on the given port",
      "returns": "clip",
      "signature": "clip, [int port], [string compression]",
      "wiki": "TCPServer"
    },
    {
      "text": "ConditionalFilter",
      "description": "conditionally return source1 or source2 based on the expression",
      "returns": "clip",
      "signature": "clip testclip, clip source1, clip source2, string expression1, string operator, string expression2, [bool show]"
    },
    {
      "text": "ConditionalSelect",
      "description": "select a clip based on the value of expression",
      "returns": "clip",
      "signature": "clip testclip, string expression, clip source0, clip source1, clip source2..., [bool show]",
      "wiki": "ConditionalFilter"
    },
    {
      "text": "ScriptClip",
      "description": "evaluate script for each frame",
      "returns": "clip",
      "signature": "clip, string filter, [bool show], [bool after_frame]",
      "wiki": "ConditionalFilter"
    },
    {
      "text": "FrameEvaluate",
      "description": "evaluate script for each frame, ignoring the result",
      "returns": "clip",
      "signature": "clip clip, script filter, [bool after_frame]",
      "wiki": "ConditionalFilter"
    },
    {
      "text": "ConditionalReader",
      "description": "imports values from a file name into a variable that changes each frame",
      "returns": "clip",
      "signature": "clip, string filename, string variablename, [bool show]"
    },
    {
      "text": "WriteFile",
      "description": "writes the evaulation of an expression to a file",
      "returns": "clip",
      "signature": "clip, string filename, string expression..., [bool append], [bool flush]"
    },
    {
      "text": "WriteFileIf",
      "description": "writes the evaulation of an expression to a file if the first expression is true",
      "returns": "?",
      "signature": "clip, string filename, string expression..., [bool append], [bool flush]",
      "wiki": "WriteFile"
    },
    {
      "text": "WriteFileStart",
      "description": "writes the evaulation of an expression when the script is opened",
      "returns": "?",
      "signature": "clip, string filename, string expression..., [bool append]",
      "wiki": "WriteFile"
    },
    {
      "text": "WriteFileEnd",
      "description": "writes the evaulation of an expression when the script is closed",
      "returns": "?",
      "signature": "clip, string filename, string expression..., [bool append]",
      "wiki": "WriteFile"
    },
    {
      "text": [ "BlankClip", "Blackness" ],
      "description": "generates a blank clip",
      "returns": "clip",
      "signature": "clip, [int length], [int width], [int height], [string pixel_type], [float fps], [int fps_denominator], [int audio_rate], [int channels], [string sample_type], [int color], [int color_yuv]"
    },
    {
      "text": "ColorBars",
      "description": "generates a clip that shows SMPTE color bars",
      "returns": "clip",
      "signature": "[int width], [int height], [string pixel_type]"
    },
    {
      "text": "ColorBarsHD",
      "description": "generates a clip that shows HD SMPTE color bars",
      "returns": "clip",
      "signature": "[int width], [int height], [string pixel_type]",
      "wiki": "ColorBars#ColorBarsHD"
    },
    {
      "text": "Compare",
      "description": "compare original to filtered and overlay results on filtered",
      "returns": "clip",
      "signature": "clip filtered, clip original, [string channels], [string logfile], [bool show_graph]"
    },
    {
      "text": "Echo",
      "description": "forces AviSynth to fetch frames from input clips, returning the first clip",
      "returns": "clip",
      "signature": "clip..."
    },
    {
      "text": "Histogram",
      "description": "overlays a histrogram onto the input clip",
      "returns": "clip",
      "signature": "clip, [string mode], [float factor]"
    },
    {
      "text": "Info",
      "description": "overlays clip info on the clip",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "Preroll",
      "description": "pre-fetch frames after any seek",
      "returns": "clip",
      "signature": "clip, [int video], [float audio]"
    },
    {
      "text": "MessageClip",
      "description": "generate a clip showing the given message",
      "returns": "clip",
      "signature": "string message, [int width], [int height], [bool shrink], [int text_color], [int halo_color], [int bg_color]"
    },
    {
      "text": "ShowFiveVersions",
      "description": "show five clips",
      "returns": "clip",
      "signature": "clip clip1, clip clip2, clip clip3, clip clip4, clip clip5"
    },
    {
      "text": "ShowFrameNumber",
      "description": "overlay clip with the frame number AviSynth uses for each frame",
      "returns": "clip",
      "signature": "clip, [bool scroll], [int offset], [float x], [float y], [string font], [float size], [int text_color], [int halo_color], [float font_width], [float font_angle]"
    },
    {
      "text": "ShowSMPTE",
      "description": "overlay clip with the SMPTE time code for each frame",
      "returns": "clip",
      "signature": "clip, [float fps], [string offset], [int offset_f], [float x], [float y], [string font], [float size], [int text_color], [int halo_color], [float font_width], [float font_angle]",
      "wiki": "ShowFrameNumber#ShowSMPTE"
    },
    {
      "text": "ShowTime",
      "description": "overlay clip with the time for each frame",
      "returns": "clip",
      "signature": "clip, [int offset_f], [float x], [float y], [string font], [float size], [int text_color], [int halo_color], [float font_width], [float font_angle]",
      "wiki": "ShowFrameNumber#ShowTime"
    },
    {
      "text": "StackHorizontal",
      "description": "stacks input clips horizontally left-to-right",
      "returns": "clip",
      "signature": "clip, clip..."
    },
    {
      "text": "StackVertical",
      "description": "stacks input clips vertically top-to-bottom",
      "returns": "clip",
      "signature": "clip, clip...",
      "wiki": "StackHorizontal"
    },
    {
      "text": "Subtitle",
      "description": "overlay clip with text",
      "returns": "clip",
      "signature": "clip, string text, [float x], [float y], [int first_frame], [int last_frame], [string font], [float size], [int text_color], [int halo_color], [int align], [int spc], [int lsp], [float font_width], [float font_angle], [bool interlaced]"
    },
    {
      "text": "Tone",
      "description": "generates a clip that plays a tone",
      "signature": "[float length], [float frequency], [int samplerate], [int channels], [string type], [float level]",
      "returns": "clip"
    },
    {
      "text": "Version",
      "description": "generates a short clip that shows the AviSynth version",
      "signature": "",
      "returns": "clip"
    }
  ],
  "variables": [
    {
      "text": "OPT_AllowFloatAudio",
      "description": "set whether or not to output float audio",
      "wiki": "Internal_functions#OPT_AllowFloatAudio"
    },
    {
      "text": "OPT_UseWaveExtensible",
      "description": "set whether or not to use WAVE_FORMAT_EXTENSIBLE",
      "wiki": "Internal_functions#OPT_UseWaveExtensible"
    },
    {
      "text": "OPT_VDubPlanarHack",
      "description": "set to true to flip YV24 and YV16 chroma planes (for early versions of VirtualDub)",
      "wiki": "Internal_functions#OPT_VDubPlanarHack"
    },
    {
      "text": "OPT_dwChannelMask",
      "description": "sets the dwChannelMask field in WAVE_FORMAT_EXTENSIBLE",
      "wiki": "Internal_functions#OPT_dwChannelMask"
    },
    {
      "text": "OPT_AVIPadScanlines",
      "description": "set whether to use DWORD planar padding",
      "wiki": "Internal_functions#OPT_AVIPadScanlines"
    },
    {
      "text": "last",
      "description": "result of the previous line (if a clip and not assigned to a variable)",
      "wiki": "Grammar"
    }
  ]
}
