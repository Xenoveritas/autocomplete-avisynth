{
  "wiki": "http://avisynth.nl/index.php/",
  "control": [
    "return",
    "global",
    "try",
    "catch"
  ],
  "functions": [
    {
      "text": "Max",
      "description": "return the greatest value among all input arguments",
      "signature": "float, float...",
      "returns": "float",
      "wiki": "Internal_functions#Max"
    },
    {
      "text": "Min",
      "description": "return the least value among all input arguments",
      "signature": "float, float...",
      "returns": "float",
      "wiki": "Internal_functions#Min"
    },
    {
      "text": "MulDiv",
      "description": "multiplies the first two arguments and then divides by the third",
      "signature": "int m, int n, int d",
      "returns": "int",
      "wiki": "Internal_functions#MulDiv"
    },
    {
      "text": "Floor",
      "description": "returns the input argument with the floating part rounded down",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Floor"
    },
    {
      "text": "Ceil",
      "description": "returns the input argument with the floating part rounded up",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Ceil"
    },
    {
      "text": "Round",
      "description": "returns the input argument rounded to the nearest integer",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Round"
    },
    {
      "text": "Sin",
      "description": "calculates the sine of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Sin"
    },
    {
      "text": "Cos",
      "description": "calculates the cosine of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Cos"
    },
    {
      "text": "Tan",
      "description": "calculates the tangent of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Tan"
    },
    {
      "text": "Asin",
      "description": "calculates the arc sine of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Asin"
    },
    {
      "text": "Acos",
      "description": "calculates the arc cosine of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Acos"
    },
    {
      "text": "Atan",
      "description": "calculates the arc tangent of its argument (in radians)",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Atan"
    },
    {
      "text": "Atan2",
      "description": "calculates the angle (in radians) between the positive X-axis and the given point",
      "signature": "float x, float y",
      "returns": "float",
      "wiki": "Internal_functions#Atan2"
    },
    {
      "text": "Sinh",
      "description": "calculates the hyperbolic sine of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Sinh"
    },
    {
      "text": "Cosh",
      "description": "calculates the hyperbolic cosine of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Cosh"
    },
    {
      "text": "Tanh",
      "description": "calculates the hyperbolic tangent of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Tanh"
    },
    {
      "text": "Fmod",
      "description": "calculates the floating point modulo",
      "signature": "float, float",
      "returns": "float",
      "wiki": "Internal_functions#Fmod"
    },
    {
      "text": "Pi",
      "description": "returns \u03C0",
      "signature": "",
      "returns": "float",
      "wiki": "Internal_functions#Pi"
    },
    {
      "text": "Tau",
      "description": "returns \u03C4 (which is 2\u03C0)",
      "signature": "",
      "returns": "float",
      "wiki": false
    },
    {
      "text": "Exp",
      "description": "returns the natural (base-e) exponent of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Exp"
    },
    {
      "text": "Log",
      "description": "returns the natural (base-e) logarithm of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Log"
    },
    {
      "text": "Log10",
      "description": "returns the common logarithm of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Log10"
    },
    {
      "text": "Pow",
      "description": "returns base raised to the given power",
      "signature": "float base, float power",
      "returns": "float",
      "wiki": "Internal_functions#Pow"
    },
    {
      "text": "Sqrt",
      "description": "returns the square root of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Sqrt"
    },
    {
      "text": "Abs",
      "description": "returns the absolute value of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Abs"
    },
    {
      "text": "Sign",
      "description": "returns the sign of its argument (1, 0, or -1)",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Sign"
    },
    {
      "text": "Int",
      "description": "returns the input argument rounded towards zero",
      "signature": "float",
      "returns": "int",
      "wiki": "Internal_functions#Int"
    },
    {
      "text": "Frac",
      "description": "returns the fractional component of its argument",
      "signature": "float",
      "returns": "float",
      "wiki": "Internal_functions#Frac"
    },
    {
      "text": "Float",
      "description": "returns the input argument as a floating point number",
      "signature": "int",
      "returns": "float",
      "wiki": "Internal_functions#Float"
    },
    {
      "text": "Rand",
      "description": "returns a randomly generated number",
      "signature": "[int max], [bool scale], [bool seed]",
      "returns": "int",
      "wiki": "Internal_functions#Rand"
    },
    {
      "text": "Spline",
      "description": "interpolates the Y value based on a given X for the given spline",
      "signature": "float X, float x1, float y1, float x2, float y2..., [bool cubic]",
      "returns": "float",
      "wiki": "Internal_functions#Spline"
    },
    {
      "text": "ContinuedNumerator",
      "description": "calculates the numerator of a continued fraction",
      "signature": "float, int limit",
      "returns": "int",
      "wiki": "Internal_functions#Continued_Numerator.2C_Denominator"
    },
    {
      "text": "ContinuedDenominator",
      "description": "calculates the denominator of a continued fraction",
      "signature": "float, int limit",
      "returns": "int",
      "wiki": "Internal_functions#Continued_Numerator.2C_Denominator"
    },
    {
      "text": "BitAnd",
      "description": "bitwise AND",
      "signature": "int, int",
      "returns": "int",
      "wiki": "Internal_functions#BitAnd"
    },
    {
      "text": "BitNot",
      "description": "bitwise NOT",
      "signature": "int",
      "returns": "int",
      "wiki": "Internal_functions#BitNot"
    },
    {
      "text": "BitOr",
      "description": "bitwise OR",
      "signature": "int, int",
      "returns": "int",
      "wiki": "Internal_functions#BitOr"
    },
    {
      "text": "BitXor",
      "description": "bitwise XOR",
      "signature": "int, int",
      "returns": "int",
      "wiki": "Internal_functions#BitXor"
    },
    {
      "text": [ "BitLShift", "BitShl", "BitSal" ],
      "description": "bit-shift left",
      "signature": "int number, int shift",
      "returns": "int",
      "wiki": "Internal_functions#Bit_shift_left"
    },
    {
      "text": [ "BitRShiftA", "BitRShiftS", "BitSar" ],
      "description": "arithmetic (signed) bit-shift right",
      "signature": "int number, int shift",
      "returns": "int",
      "wiki": "Internal_functions#Bit_shift_right"
    },
    {
      "text": [ "BitRShiftL", "BitRShiftU", "BitShr" ],
      "description": "logical (unsigned) bit-shift right",
      "signature": "int number, int shift",
      "returns": "int",
      "wiki": "Internal_functions#Bit_shift_right.2C_unsigned"
    },
    {
      "text": [ "BitLRotate", "BitRol" ],
      "description": "bit rotate left",
      "signature": "int number, int rotate",
      "returns": "int",
      "wiki": "Internal_functions#Bit_rotate_left"
    },
    {
      "text": [ "BitRRotate", "BitRor" ],
      "description": "bit rotate right",
      "signature": "int number, int rotate",
      "returns": "int",
      "wiki": "Internal_functions#Bit_rotate_right"
    },
    {
      "text": [ "BitTest", "BitTst" ],
      "description": "test if a bit is set",
      "signature": "int number, int bit",
      "returns": "bool",
      "wiki": "Internal_functions#Bit_test"
    },
    {
      "text": "BitSet",
      "description": "return the same number after setting the given bit to 1",
      "signature": "int number, int bit",
      "returns": "int",
      "wiki": "Internal_functions#BitSet"
    },
    {
      "text": [ "BitClear", "BitClr" ],
      "description": "return the same number after setting the given bit to 0",
      "signature": "int number, int bit",
      "returns": "int",
      "wiki": "Internal_functions#Bit_clear"
    },
    {
      "text": [ "BitChange", "BitChg" ],
      "description": "return the same number after inverting the given bit",
      "signature": "int number, int bit",
      "returns": "int",
      "wiki": "Internal_functions#Bit_change"
    },
    {
      "text": "LCase",
      "description": "convert string to lower case",
      "signature": "string",
      "returns": "string",
      "wiki": "Internal_functions#LCase"
    },
    {
      "text": "UCase",
      "description": "convert string to upper case",
      "signature": "string",
      "returns": "string",
      "wiki": "Internal_functions#UCase"
    },
    {
      "text": "StrLen",
      "description": "gets the length of a string",
      "signature": "string",
      "returns": "int",
      "wiki": "Internal_functions#StrLen"
    },
    {
      "text": "RevStr",
      "description": "reverse a string (\"AviSynth\" \u2192 \"htnySivA\")",
      "signature": "string",
      "returns": "string",
      "wiki": "Internal_functions#RevStr"
    },
    {
      "text": "LeftStr",
      "description": "returns the first count characters of the given string",
      "signature": "string, int count",
      "returns": "string",
      "wiki": "Internal_functions#LeftStr"
    },
    {
      "text": "RightStr",
      "description": "returns the last count characters of the given string",
      "signature": "string, int count",
      "returns": "string",
      "wiki": "Internal_functions#RightStr"
    },
    {
      "text": "MidStr",
      "description": "returns the given slice (1-based index)",
      "signature": "string, int count, [int length]",
      "returns": "string",
      "wiki": "Internal_functions#MidStr"
    },
    {
      "text": "FindStr",
      "description": "find the 1-based index of the needle string in the haystack",
      "signature": "string haystack, string needle",
      "returns": "int",
      "wiki": "Internal_functions#FindStr"
    },
    {
      "text": "FillStr",
      "description": "returns count copies of the fill string",
      "signature": "int count, [string fill]",
      "returns": "string",
      "wiki": "Internal_functions#FillStr"
    },
    {
      "text": "StrCmp",
      "description": "compare two strings (case-sensitive)",
      "signature": "string, string",
      "returns": "int",
      "wiki": "Internal_functions#StrCmp"
    },
    {
      "text": "StrCmpi",
      "description": "compare two strings (case-insensitive)",
      "signature": "string, string",
      "returns": "int",
      "wiki": "Internal_functions#StrCmpi"
    },
    {
      "text": "Chr",
      "description": "returns the given ASCII character code as a string",
      "signature": "int",
      "returns": "string",
      "wiki": "Internal_functions#Chr"
    },
    {
      "text": "Ord",
      "description": "returns the ASCII character code of the first character in the string",
      "signature": "string",
      "returns": "int",
      "wiki": "Internal_functions#Ord"
    },
    {
      "text": "Time",
      "description": "returns the current time in the given format",
      "signature": "string",
      "returns": "string",
      "wiki": "Internal_functions#Time"
    },
    {
      "text": "IsBool",
      "description": "tests if a variable is a boolean",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsBool"
    },
    {
      "text": "IsClip",
      "description": "tests if a variable is a clip",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsClip"
    },
    {
      "text": "IsFloat",
      "description": "tests if a variable is a float",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsFloat"
    },
    {
      "text": "IsInt",
      "description": "tests if a variable is an int",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsInt"
    },
    {
      "text": "IsString",
      "description": "tests if a variable is a string",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#IsString"
    },
    {
      "text": "Exist",
      "description": "check if a given file exists",
      "signature": "string filename",
      "returns": "bool",
      "wiki": "Internal_functions#Exist"
    },
    {
      "text": "Defined",
      "description": "check if a variable has a defined value",
      "signature": "val",
      "returns": "bool",
      "wiki": "Internal_functions#Defined"
    },
    {
      "text": "Value",
      "description": "convert a string to a numeric value",
      "signature": "string",
      "returns": "float",
      "wiki": "Internal_functions#Value"
    },
    {
      "text": "HexValue",
      "description": "convert a hexadecimal string to a numeric value",
      "signature": "string",
      "returns": "int",
      "wiki": "Internal_functions#HexValue"
    },
    {
      "text": "Hex",
      "description": "convert a number to a hexadecimal string",
      "signature": "int",
      "returns": "string",
      "wiki": "Internal_functions#Hex"
    },
    {
      "text": "String",
      "description": "convert a value to a string",
      "signature": "val, [string format]",
      "returns": "string",
      "wiki": "Internal_functions#String"
    },
    {
      "text": "Apply",
      "description": "invoke a function",
      "signature": "string function_name, [val args...]",
      "returns": "val",
      "wiki": "Internal_functions#Apply"
    },
    {
      "text": "Eval",
      "description": "evaluate a string as AviSynth script",
      "signature": "string, [string name]",
      "returns": "val",
      "wiki": "Internal_functions#Eval"
    },
    {
      "text": "Import",
      "description": "import another AviSynth script",
      "signature": "string",
      "returns": "val",
      "wiki": "Internal_functions#Import"
    },
    {
      "text": "Select",
      "description": "return the nth argument",
      "signature": "int n, [val args...]",
      "returns": "val",
      "wiki": "Internal_functions#Select"
    },
    {
      "text": "Default",
      "description": "returns the value of x if defined, otherwise the given default value",
      "signature": "val x, val value",
      "returns": "val",
      "wiki": "Internal_functions#Default"
    },
    {
      "text": "Assert",
      "description": "assert that a given condition is true, raising an error if it isn't",
      "signature": "bool condition, [string message]",
      "wiki": "Internal_functions#Assert"
    },
    {
      "text": "NOP",
      "description": "does nothing and returns 0",
      "signature": "",
      "returns": "int",
      "wiki": "Internal_functions#NOP"
    },
    {
      "text": "Undefined",
      "description": "returns the \"undefined\" value",
      "signature": "",
      "returns": "val",
      "wiki": "Internal_functions#Undefined"
    },
    {
      "text": "SetMemoryMax",
      "description": "sets the maximum memory to use in MB",
      "signature": "int mb",
      "returns": "int",
      "wiki": "Internal_functions#SetMemoryMax"
    },
    {
      "text": "SetWorkingDir",
      "description": "sets the working directory",
      "signature": "string dir",
      "returns": "int",
      "wiki": "Internal_functions#SetWorkingDir"
    },
    {
      "text": "SetPlanarLegacyAlignment",
      "description": "sets whether to use the legacy planar alignment mode",
      "signature": "bool",
      "wiki": "Internal_functions#SetPlanarLegacyAlignment"
    },
    {
      "text": "ScriptName",
      "description": "gets the full path name of the AVS script file",
      "signature": "",
      "returns": "string",
      "wiki": "Internal_functions#ScriptName"
    },
    {
      "text": "ScriptFile",
      "description": "gets the file name of the AVS script file",
      "signature": "",
      "returns": "string",
      "wiki": "Internal_functions#ScriptFile"
    },
    {
      "text": "ScriptDir",
      "description": "gets the path of the directory of the AVS script file",
      "signature": "",
      "returns": "string",
      "wiki": "Internal_functions#ScriptDir"
    },
    {
      "text": "VersionNumber",
      "description": "gets the version of AviSynth as a float",
      "signature": "",
      "returns": "float",
      "wiki": "Internal_functions#VersionNumber"
    },
    {
      "text": "VersionString",
      "description": "gets the version of AviSynth as a string",
      "signature": "",
      "returns": "string",
      "wiki": "Internal_functions#VersionString"
    },
    {
      "text": "AverageLuma",
      "description": "gets the average luma of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Average"
    },
    {
      "text": "AverageChromaU",
      "description": "gets the average of the U chroma plane of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Average"
    },
    {
      "text": "AverageChromaV",
      "description": "gets the average of the V chroma plane of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Average"
    },
    {
      "text": "RGBDifference",
      "description": "gets the RGB difference between two clips",
      "signature": "clip, clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference"
    },
    {
      "text": "LumaDifference",
      "description": "gets the luma difference between two clips",
      "signature": "clip, clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference"
    },
    {
      "text": "ChromaUDifference",
      "description": "gets the chroma U plane difference between two clips",
      "signature": "clip, clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference"
    },
    {
      "text": "ChromaVDifference",
      "description": "gets the chroma V plane difference between two clips",
      "signature": "clip, clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference"
    },
    {
      "text": "RGBDifferenceFromPrevious",
      "description": "gets the RGB difference between the current frame and the previous frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_from_previous"
    },
    {
      "text": "YDifferenceFromPrevious",
      "description": "gets the luma difference between the current frame and the previous frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_from_previous"
    },
    {
      "text": "UDifferenceFromPrevious",
      "description": "gets the U chroma plane difference between the current frame and the previous frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_from_previous"
    },
    {
      "text": "VDifferenceFromPrevious",
      "description": "gets the Y chroma plane difference between the current frame and the previous frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_from_previous"
    },
    {
      "text": "RGBDifferenceToNext",
      "description": "gets the RGB difference between the current frame and the next frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_to_next"
    },
    {
      "text": "YDifferenceToNext",
      "description": "gets the luma difference between the current frame and the next frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_to_next"
    },
    {
      "text": "UDifferenceToNext",
      "description": "gets the U chroma plane difference between the current frame and the next frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_to_next"
    },
    {
      "text": "VDifferenceToNext",
      "description": "gets the V chroma plane difference between the current frame and the next frame",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Difference_to_next"
    },
    {
      "text": "YPlaneMax",
      "description": "gets the maximum luma value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "UPlaneMax",
      "description": "gets the maximum value of the U chroma plane of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "VPlaneMax",
      "description": "gets the maximum value of the V chroma plane of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "YPlaneMin",
      "description": "gets the minimum luma value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "UPlaneMin",
      "description": "gets the minimum value of the U chroma plane of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "VPlaneMin",
      "description": "gets the minimum value of the V chroma plane of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "YPlaneMedian",
      "description": "gets the median luma value of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "UPlaneMedian",
      "description": "gets the median value of the U chroma plane of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "VPlaneMedian",
      "description": "gets the median value of the V chroma plane of a clip",
      "signature": "clip",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "YPlaneMinMaxDifference",
      "description": "gets the difference between the minimum and miximum luma value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "UPlaneMinMaxDifference",
      "description": "gets the difference between the minimum and miximum U chroma plane value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "VPlaneMinMaxDifference",
      "description": "gets the difference between the minimum and miximum V chroma plane value of a clip",
      "signature": "clip, [float threshold]",
      "returns": "float",
      "wiki": "Internal_functions#Color_plane_median.2C_min.2C_max.2C_range"
    },
    {
      "text": "Width",
      "description": "gets the width of a clip in pixels",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Resolution"
    },
    {
      "text": "Height",
      "description": "gets the height of a clip in pixels",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Resolution"
    },
    {
      "text": "FrameCount",
      "description": "gets the total number of frames",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Framerate_and_Duration"
    },
    {
      "text": "FrameRate",
      "description": "gets the approximate frame rate",
      "signature": "clip",
      "returns": "float",
      "wiki": "Clip_properties#Framerate_and_Duration"
    },
    {
      "text": "FrameRateNumerator",
      "description": "gets the exact numerator of the frame rate",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Framerate_and_Duration"
    },
    {
      "text": "FrameRateDenominator",
      "description": "gets the exact denominator of the frame rate",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Framerate_and_Duration"
    },
    {
      "text": "AudioRate",
      "description": "gets the audio sample rate",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLength",
      "description": "gets the number of audio samples (as a 32-bit value, may overflow)",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLengthF",
      "description": "gets the number of audio samples (as a floating point value, may have rounding)",
      "signature": "clip",
      "returns": "float",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLengthHi",
      "description": "gets the number of audio samples divided by d",
      "signature": "clip, int d",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLengthLo",
      "description": "gets the number of audio samples modulo m",
      "signature": "clip, int m",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioLengthS",
      "description": "gets the number of audio samples as a string",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioChannels",
      "description": "gets the number of audio channels",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "AudioBits",
      "description": "gets the audio bit depth",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "IsAudioFloat",
      "description": "gets whether audio samples are floating point",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "IsAudioInt",
      "description": "gets whether audio samples are integers",
      "signature": "clip",
      "returns": "int",
      "wiki": "Clip_properties#Audio"
    },
    {
      "text": "IsRGB",
      "description": "checks if a clip's colorspace is an RGB format",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsRGB24",
      "description": "checks if a clip's colorspace is RGB24",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsRGB32",
      "description": "checks if a clip's colorspace is RGB32",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYUV",
      "description": "checks if a clip's colorspace is YUV",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYUY2",
      "description": "checks if a clip's colorspace is YUY2",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYV12",
      "description": "checks if a clip's colorspace is YV12",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYV16",
      "description": "checks if a clip's colorspace is YV16",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYV24",
      "description": "checks if a clip's colorspace is YV24",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsYV411",
      "description": "checks if a clip's colorspace is YV411",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "PixelType",
      "description": "gets the pixel format as a string",
      "signature": "clip",
      "returns": "string",
      "wiki": "Clip_properties#Color_Format"
    },
    {
      "text": "IsFieldBased",
      "description": "gets whether the clip is field-based",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "IsFrameBased",
      "description": "gets whether the clip is frame-based",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "IsPlanar",
      "description": "gets whether the clip color format is planar",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "IsInterleaved",
      "description": "gets whether the clip color format is interleaved",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "GetParity",
      "description": "checks if on the given frame the frame is the top field (field-based) or the top field is first (frame-based)",
      "signature": "clip, [int frame]",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "HasAudio",
      "description": "gets whether the clip has audio",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "HasVideo",
      "description": "gets whether the clip has video",
      "signature": "clip",
      "returns": "bool",
      "wiki": "Clip_properties#Other_Properties"
    },
    {
      "text": "LoadPlugin",
      "description": "loads one or more external AviSynth plugins",
      "wiki": "Plugins#LoadPlugin",
      "signature": "string..."
    },
    {
      "text": "LoadVirtualDubPlugin",
      "description": "loads a VirtualDub plugin",
      "wiki": "Plugins#LoadVirtualDubPlugin",
      "signature": "string"
    },
    {
      "text": "LoadVFAPIPlugin",
      "description": "loads a VFAPI plugin",
      "wiki": "Plugins#LoadVFAPIPlugin",
      "signature": "string"
    },
    {
      "text": [ "LoadCPlugin", "Load_Stdcall_Plugin" ],
      "description": "loads an AviSynth C plugin",
      "wiki": "Plugins#LoadCPlugin",
      "signature": "string"
    },
    {
      "text": [ "AviSource", "OpenDMLSource", "AVIFileSource" ],
      "description": "load a clip from an AVI file",
      "wiki": "AviSource",
      "returns": "clip",
      "signature": "string filename..., [bool audio=true], [string pixel_type='FULL'], [string fourCC], [int vtrack=0], [int atrack=0]"
    },
    {
      "text": "DirectShowSource",
      "description": "load a clip from a video using DirectShow",
      "returns": "clip"
    },
    {
      "text": [ "ImageSource", "ImageReader" ],
      "returns": "clip",
      "description": "loads images as a clip",
      "signature": "[string file], [int start], [int end], [float fps], [bool use_DevIL], [bool info], [string pixel_type]",
      "wiki": "ImageSource"
    },
    {
      "text": "ImageSourceAnim",
      "description": "loads an animated image source as a clip (e.g. GIF)",
      "signature": "[string file], [float fps], [bool info], [string pixel_type='RGB32']",
      "returns": "clip",
      "wiki": "ImageSource"
    },
    {
      "text": "ImageWriter",
      "description": "export frames as individual images",
      "signature": "clip, [string file], [int start], [int end], [string type], [bool info]"
    },
    {
      "text": "SegmentedAVISource",
      "description": "load multiple AVI files and unaligned splice them together",
      "signature": "string base_filename..., [bool audio], [string pixel_type], [int vtrack=0], [int atrack=0]",
      "returns": "clip",
      "wiki": "SegmentedAviSource"
    },
    {
      "text": "SegmentedDirectShowSource",
      "description": "load multiple video files through DirectShow and unaligned splice them together",
      "signature": "string base_filename..., [float fps], [bool seek], [bool audio], [bool video], [bool convertfps], [bool seekzero], [int timeout], [string pixel_type]",
      "returns": "clip",
      "wiki": "SegmentedAviSource"
    },
    {
      "text": "SoundOut",
      "description": "displays a GUI to export audio",
      "signature": ""
    },
    {
      "text": "WAVSource",
      "description": "loads an audio-only clip",
      "signature": "string",
      "returns": "clip",
      "wiki": "AviSource"
    },
    {
      "text": "ColorYUV",
      "description": "adjust colors and luminance in a clip",
      "signature": "clip, [float gain_y], [float off_y], [float gamma_y], [float cont_y], [float gain_u], [float off_u], [float gamma_u], [float cont_u], [float gain_v], [float off_v], [float gamma_v], [float cont_v], [string levels], [string opt], [boolean showyuv], [boolean analyze], [boolean autowhite], [boolean autogain], [boolean conditional]",
      "returns": "clip"
    },
    {
      "text": "ConvertToRGB",
      "description": "convert a clip to interleaved RGB",
      "returns": "clip",
      "signature": "clip, [string matrix], [bool interlaced], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#RGB_interleaved"
    },
    {
      "text": "ConvertToRGB24",
      "description": "convert a clip to interleaved RGB24",
      "returns": "clip",
      "signature": "clip, [string matrix], [bool interlaced], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#RGB_interleaved"
    },
    {
      "text": "ConvertToRGB32",
      "description": "convert a clip to interleaved ARGB32",
      "returns": "clip",
      "signature": "clip, [string matrix], [bool interlaced], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#RGB_interleaved"
    },
    {
      "text": "ConvertToYUY2",
      "description": "convert a clip to interleaved YUY2",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#YUV422"
    },
    {
      "text": "ConvertBackToYUY2",
      "description": "convert a clip that was converted from YUY2 back to YUY2",
      "signature": "clip, [string matrix]",
      "returns": "clip",
      "wiki": "Convert#YUV422"
    },
    {
      "text": "ConvertToY8",
      "description": "convert a clip to Y8 (black and white)",
      "signature": "clip, [string matrix]",
      "returns": "clip",
      "wiki": "Convert#Y-only"
    },
    {
      "text": "ConvertToYV411",
      "description": "convert a clip to planar YUV411",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#YUV411"
    },
    {
      "text": "ConvertToYV12",
      "description": "convert a clip to planar YUV420",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample], [string ChromaOutPlacement]",
      "wiki": "Convert#YUV420"
    },
    {
      "text": "ConvertToYV16",
      "description": "convert a clip to planar YUV422",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#YUV422"
    },
    {
      "text": "ConvertToYV24",
      "description": "convert a clip to planar YUV444",
      "returns": "clip",
      "signature": "clip, [bool interlaced], [string matrix], [string ChromaInPlacement], [string chromaresample]",
      "wiki": "Convert#YUV444"
    },
    {
      "text": "FixLuminance",
      "description": "correct a specific VCR quirk",
      "returns": "clip",
      "signature": "clip, int intercept, int slope",
      "deprecated": true
    },
    {
      "text": [ "Greyscale", "Grayscale" ],
      "description": "convert to greyscale without changing the color format",
      "returns": "clip",
      "signature": "clip, [string matrix]"
    },
    {
      "text": "Invert",
      "description": "invert color channels",
      "returns": "clip",
      "signature": "clip, [string channels]"
    },
    {
      "text": "Levels",
      "description": "adjust brightness, contrast, and gamma levels like VirtualDub does",
      "returns": "clip",
      "signature": "clip, int input_low, float gamma, int input_high, int output_low, int output_high, [bool coring], [bool dither]"
    },
    {
      "text": "Limiter",
      "description": "filter for clipping levels to within CCIR-601 range",
      "returns": "clip",
      "signature": "clip, [int min_luma], [int max_luma], [int min_chroma], [int max_chroma], [string show]"
    },
    {
      "text": "MergeARGB",
      "description": "merge the channels of each of the given clips into a new RGB32 clip",
      "returns": "clip",
      "signature": "clip alpha, clip red, clip green, clip blue",
      "wiki": "MergeRGB"
    },
    {
      "text": "MergeRGB",
      "description": "merge the channels of each of the given clips into a new RGB32 clip",
      "returns": "clip",
      "signature": "clip red, clip green, clip blue, [string pixel_type]"
    },
    {
      "text": "Merge",
      "description": "merge two clips with each other",
      "returns": "clip",
      "signature": "clip base, clip overlay, [float weight]"
    },
    {
      "text": "MergeChroma",
      "description": "merge only the chroma of two clips with each other",
      "returns": "clip",
      "signature": "clip base, clip overlay, [float weight]",
      "wiki": "Merge#MergeChroma"
    },
    {
      "text": "MergeLuma",
      "description": "merge only the luma of two clips with each other",
      "returns": "clip",
      "signature": "clip base, clip overlay, [float weight]",
      "wiki": "Merge#MergeLuma"
    },
    {
      "text": "RGBAdjust",
      "description": "adjust each color channel of an RGB clip individually",
      "returns": "clip",
      "signature": "clip, [float r], [float g], [float b], [float a], [float rb], [float gb], [float bb], [float ab], [float rg], [float gg], [float bg], [float ag], [bool analyze], [bool dither]"
    },
    {
      "text": "ShowAlpha",
      "description": "returns a grayscale copy of the alpha channel",
      "returns": "clip",
      "signature": "clip, [string pixel_type]"
    },
    {
      "text": "ShowRed",
      "description": "returns a grayscale copy of the red channel",
      "returns": "clip",
      "signature": "clip, [string pixel_type]",
      "wiki": "ShowAlpha"
    },
    {
      "text": "ShowGreen",
      "description": "returns a grayscale copy of the green channel",
      "returns": "clip",
      "signature": "clip, [string pixel_type]",
      "wiki": "ShowAlpha"
    },
    {
      "text": "ShowBlue",
      "description": "returns a grayscale copy of the blue channel",
      "returns": "clip",
      "signature": "clip, [string pixel_type]",
      "wiki": "ShowAlpha"
    },
    {
      "text": "SwapUV",
      "description": "swaps the U and V planes",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    },
    {
      "text": "UToY",
      "description": "copies the U plane to the Y plane",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    },
    {
      "text": "UToY8",
      "description": "copies the U plane to a new Y8 clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    }, {
      "text": "VToY",
      "description": "copies the V plane to the Y plane",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    },
    {
      "text": "VToY8",
      "description": "copies the V plane to a new Y8 clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Swap"
    },
    {
      "text": "YToUV",
      "description": "copies the Y planes of two clips to the UV planes",
      "returns": "clip",
      "signature": "clip u, clip v, [clip y]",
      "wiki": "Swap"
    },
    {
      "text": "Subtract",
      "description": "subtracts one clip from another",
      "returns": "clip",
      "signature": "clip, clip"
    },
    {
      "text": "Tweak",
      "description": "tweak hue, saturation, brightness, and contrast of a YUV clip",
      "returns": "clip",
      "signature": "clip, [float hue], [float sat], [float bright], [float cont], [bool coring], [bool sse], [float startHue], [float endHue], [float maxSat], [float minSat], [float interp], [bool dither]"
    },
    {
      "text": "ColorKeyMask",
      "description": "clears pixels alpha channel based on a given color",
      "returns": "clip",
      "signature": "clip, int color, [int tolB], [int tolG], [int tolR]",
      "wiki": "Layer#ColorKeyMask"
    },
    {
      "text": "Layer",
      "description": "layers one clip over another",
      "returns": "clip",
      "signature": "clip base, clip overlay, [string op], [int level], [int x], [int y], [int threshold], [bool use_chroma]"
    },
    {
      "text": "Mask",
      "description": "applies a greyscale version of the mask clip as the alpha channel of the first clip",
      "returns": "clip",
      "signature": "clip, clip mask",
      "wiki": "Layer#Mask"
    },
    {
      "text": "MaskHS",
      "description": "generates a Y8 mask",
      "returns": "clip",
      "signature": "clip, [float startHue], [float endHue], [float maxSat], [float minSat], [bool coring]"
    },
    {
      "text": "Overlay",
      "description": "overlays a clip on top of another clip",
      "returns": "clip",
      "signature": "clip base, clip overlay, [int x], [int y], [clip mask], [float opacity], [string mode], [bool greymask], [string output], [bool ignore_conditional], [bool pc_range]"
    },
    {
      "text": "ResetMask",
      "description": "resets every pixel's alpha channel to full opacity",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Layer#ResetMask"
    },
    {
      "text": "AddBorders",
      "description": "add borders around a clip",
      "returns": "clip",
      "signature": "clip, int left, int top, int right, int bottom, [int color]"
    },
    {
      "text": "Crop",
      "description": "crop a clip to a certain area",
      "returns": "clip",
      "signature": "clip, int left, int top, int width, int height, [bool align]"
    },
    {
      "text": "CropBottom",
      "description": "crop the bottom count lines off a clip",
      "returns": "clip",
      "signature": "clip, int count",
      "wiki": "Crop"
    },
    {
      "text": "FlipHorizontal",
      "description": "flips a clip horizontally",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Flip"
    },
    {
      "text": "FlipVertical",
      "description": "flips a clip vertically",
      "returns": "clip",
      "signature": "clip",
      "wiki": "Flip"
    },
    {
      "text": "Letterbox",
      "description": "black out the top/bottom of a clip",
      "returns": "clip",
      "signature": "clip, int top, int bottom, [int left], [int right], [int color]"
    },
    {
      "text": "ReduceBy2",
      "description": "halve the size of the input clip",
      "returns": "clip",
      "signature": "clip"
    },
    {
      "text": "HorizontalReduceBy2",
      "description": "halve the horizontal size of the input clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ReduceBy2"
    },
    {
      "text": "VerticalReduceBy2",
      "description": "halve the vertical size of the input clip",
      "returns": "clip",
      "signature": "clip",
      "wiki": "ReduceBy2"
    },
    {
      "text": "BilinearResize",
      "description": "resize a clip using a bilinear resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#BilinearResize"
    },
    {
      "text": "BicubicResize",
      "description": "resize a clip using a bicubic resize",
      "signature": "clip, int target_width, int target_height, [float b=1.0/3.0], [float c=1.0/3.0], [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#BicubicResize"
    },
    {
      "text": "BlackmanResize",
      "description": "resize a clip using a Blackman resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height], [int taps=4]",
      "returns": "clip",
      "wiki": "Resize#BlackmanResize"
    },
    {
      "text": "GaussResize",
      "description": "resize a clip using a Gauss resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height], [float p=30.0]",
      "returns": "clip",
      "wiki": "Resize#GaussResize"
    },
    {
      "text": "LanczosResize",
      "description": "resize a clip using a Lanczos resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height], [int taps=3]",
      "returns": "clip",
      "wiki": "Resize#LanczosResize"
    },
    {
      "text": "Lanczos4Resize",
      "description": "resize a clip using a Lanczos resize with 4 taps",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#LanczosResize"
    },
    {
      "text": "PointResize",
      "description": "resize a clip using a nearest-neighbor resize",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#PointResize"
    },
    {
      "text": "SincResize",
      "description": "resize a clip using the truncated sinc function",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height], [int taps=4]",
      "returns": "clip",
      "wiki": "Resize#SincResize"
    },
    {
      "text": "Spline16Resize",
      "description": "resize a clip using a spline algorithm with \u221A16 (4) sample points",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#Spline_based_resizers"
    },
    {
      "text": "Spline36Resize",
      "description": "resize a clip using a spline algorithm with \u221A36 (6) sample points",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#Spline_based_resizers"
    },
    {
      "text": "Spline64Resize",
      "description": "resize a clip using a spline algorithm with \u221A64 (8) sample points",
      "signature": "clip, int target_width, int target_height, [float src_left], [float src_top], [float src_width], [float src_height]",
      "returns": "clip",
      "wiki": "Resize#Spline_based_resizers"
    },
    "SkewRows",
    "TurnLeft", "TurnRight", "Turn180",
    "Blur", "Sharpen",
    "GeneralConvolution",
    "SpatialSoften", "TemporalSoften",
    "FixBrokenChromaUpsampling",
    "AlignedSplice", "UnalignedSplice",
    "AssumeFPS", "AssumeScaledFPS", "ChangeFPS", "ConvertFPS",
    "DeleteFrame",
    "Dissolve",
    "DuplicateFrame",
    "FadeIn0", "FadeOut0", "FadeIn", "FadeOut", "FadeIn2", "FadeOut2",
    "FadeIO0", "FadeIO", "FadeIO2",
    "FreezeFrame",
    "Interleave",
    "Loop",
    "Reverse",
    "SelectEven", "SelectOdd",
    "SelectEvery",
    "SelectRangeEvery",
    "Trim",
    "AssumeFrameBased", "AssumeFieldBased",
    "AssumeTFF", "AssumeBFF",
    "Bob",
    "ComplementParity",
    "DoubleWeave",
    "PeculiarBlend",
    "Pulldown",
    "SeparateColumns", "SeparateRows",
    "SeparateFields",
    "SwapFields",
    "Weave",
    "WeaveColumns", "WeaveRows",
    "Amplify", "AmplifydB",
    "AssumeSampleRate",
    "AudioDub", "AudioDubEx",
    "AudioTrim",
    "ConvertToMono",
    "ConvertAudioTo8bit", "ConvertAudioTo16bit", "ConvertAudioTo24bit",
    "ConvertAudioTo32bit", "ConvertAudioToFloat",
    "DelayAudio",
    "EnsureVBRMP3Sync",
    "GetChannel",
    "KillAudio",
    "KillVideo",
    "MergeChannels",
    "MixAudio",
    "Normalize",
    "ResampleAudio",
    "SSRC",
    "SuperEQ",
    "TimeStretch",
    "Animate", "ApplyRange",
    "TCPDeliver",
    "ConditionalFilter", "FrameEvaluate", "ScriptClip", "ConditionalSelect",
    "ConditionalReader",
    "WriteFile", "WriteFileIf", "WriteFileStart", "WriteFileEnd",
    {
      "text": [ "BlankClip", "Blackness" ],
      "description": "generates a blank clip",
      "signature": "clip, [int length], [int width], [int height], [string pixel_type], [float fps], [int fps_denominator], [int audio_rate], [int channels], [string sample_type], [int color], [int color_yuv]",
      "returns": "clip"
    },
    "ColorBars", "ColorBarsHD",
    "Compare",
    "Echo",
    "Histogram",
    "Info",
    "Preroll",
    "MessageClip",
    "ShowFiveVersions",
    "ShowFrameNumber", "ShowSMPTE", "ShowTime",
    "StackHorizontal", "StackVertical",
    "Subtitle",
    {
      "text": "Tone",
      "description": "generates a clip that plays a tone",
      "signature": "[float length], [float frequency], [int samplerate], [int channels], [string type], [float level]",
      "returns": "clip"
    },
    {
      "text": "Version",
      "description": "generates a short clip that shows the AviSynth version",
      "signature": "",
      "returns": "clip"
    }
  ],
  "variables": [
    {
      "text": "OPT_AllowFloatAudio",
      "description": "set whether or not to output float audio",
      "wiki": "Internal_functions#OPT_AllowFloatAudio"
    },
    {
      "text": "OPT_UseWaveExtensible",
      "description": "set whether or not to use WAVE_FORMAT_EXTENSIBLE",
      "wiki": "Internal_functions#OPT_UseWaveExtensible"
    },
    {
      "text": "OPT_VDubPlanarHack",
      "description": "set to true to flip YV24 and YV16 chroma planes (for early versions of VirtualDub)",
      "wiki": "Internal_functions#OPT_VDubPlanarHack"
    },
    {
      "text": "OPT_dwChannelMask",
      "description": "sets the dwChannelMask field in WAVE_FORMAT_EXTENSIBLE",
      "wiki": "Internal_functions#OPT_dwChannelMask"
    },
    {
      "text": "OPT_AVIPadScanlines",
      "description": "set whether to use DWORD planar padding",
      "wiki": "Internal_functions#OPT_AVIPadScanlines"
    }
  ]
}
